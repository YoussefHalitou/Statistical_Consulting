})
df_24 = datasets[[6]]
View(df_24)
# At the beginning of each script
source("scripts/0_setup.R")
# Function to read data from CSV without standardizing column names
read_data <- function(file_path) {
data <- read_csv(file_path)
return(data)
}
# Function to read all datasets from a folder and return them as a list
load_datasets <- function(directory = "data/raw/historical") {
# List all CSV files in the directory
file_list <- list.files(path = directory, pattern = "\\.csv$", full.names = TRUE)
# Initialize an empty list to store data frames
data_list <- list()
# Loop through each file, read the data, and store it in the list
for (file_path in file_list) {
# Generate a unique name based on the file name (remove directory path and ".csv" extension)
data_name <- tools::file_path_sans_ext(basename(file_path))
# Read the data and add it to the list
data_list[[data_name]] <- read_data(file_path)
}
# Return the list of data frames
return(data_list)
}
# Load datasets by calling the function and storing the result
datasets <- load_datasets()
names(datasets)
data_19_raw <- datasets$Umfrage19jittered
data_20_raw <- datasets$Umfrage20jittered
data_21_raw <- datasets$Umfrage21jittered
data_22_raw <- datasets$Umfrage22jittered
data_23_raw <- datasets$Umfrage23jittered
data_24_raw <- datasets$Umfrage24jittered
# At the beginning of each script
source("scripts/0_setup.R")
# Filtering rows where "ja" is present in the agreement column
data_19 <- data_19_raw %>%
filter(grepl("ja", data_19_raw$X...WICHTIG.....Ich.bin.damit.einverstanden..dass.die.mit.dieser.Umfrage.gesammelten..anonymen..Daten.zum.Zwecke.der.Veranschaulichung.von.Methoden.in.den.Vorlesungen.Statistik.1...2.sowie.in.den.dazugehoerigen.Tutorien.genutzt.werden..Dieses.Einverstaendnis.kann.jederzeit.durch.Nachricht.an.den.Dozenten.widerrufen.werden..Potenziell.sensible.Informationen.werden.nicht.an.Dritte.weitergegeben.., ignore.case = TRUE))
data_20 <- data_20_raw %>%
filter(grepl("ja", data_20_raw$X...WICHTIG.....Ich.bin.damit.einverstanden..dass.die.mit.dieser.Umfrage.gesammelten..anonymen..Daten.vom.Dozenten.zum.Zwecke.der.Veranschaulichung.von.Methoden.genutzt.werden..Dieses.Einverstaendnis.kann.jederzeit.durch.Nachricht.an.den.Dozenten.widerrufen.werden..Potenziell.sensible.Informationen.werden.nicht.an.Dritte.weitergegeben.., ignore.case = TRUE))
data_21 <- data_21_raw %>%
filter(grepl("ja", data_21_raw$X...WICHTIG.....Ich.bin.damit.einverstanden..dass.die.mit.dieser.Umfrage.gesammelten..anonymen..Daten.vom.Dozenten.zum.Zwecke.der.Veranschaulichung.von.Methoden.genutzt.werden..Dieses.Einverstaendnis.kann.jederzeit.durch.Nachricht.an.den.Dozenten.widerrufen.werden..Potenziell.sensible.Informationen.werden.nicht.an.Dritte.weitergegeben.., ignore.case = TRUE))
data_22 <- data_22_raw %>%
filter(grepl("ja", data_22_raw$X...WICHTIG.....Ich.bin.damit.einverstanden..dass.die.mit.dieser.Umfrage.gesammelten..anonymen..Daten.vom.Dozenten.zum.Zwecke.der.Veranschaulichung.von.Methoden.genutzt.werden..Dieses.Einverstaendnis.kann.jederzeit.durch.Nachricht.an.den.Dozenten.widerrufen.werden..Potenziell.sensible.Informationen.werden.nicht.an.Dritte.weitergegeben.., ignore.case = TRUE))
data_23 <- data_23_raw %>%
filter(grepl("ja", data_23_raw$X...WICHTIG.....Ich.bin.damit.einverstanden..dass.die.mit.dieser.Umfrage.gesammelten..anonymen..Daten.vom.Dozenten.zum.Zwecke.der.Veranschaulichung.von.Methoden.genutzt.werden..Potenziell.sensible.Informationen.werden.nicht.an.Dritte.weitergegeben.., ignore.case = TRUE))
data_24 <- data_24_raw %>%
filter(grepl("ja", data_24_raw$X...WICHTIG.....Ich.bin.damit.einverstanden..dass.die.mit.dieser.Umfrage.gesammelten..anonymen..Daten.vom.Dozenten.zum.Zwecke.der.Veranschaulichung.von.Methoden.genutzt.werden..Potenziell.sensible.Informationen.werden.nicht.an.Dritte.weitergegeben.., ignore.case = TRUE))
#Creating a new column with year
data_19 <- data_19 %>%
mutate(Jahr = year(ymd_hms(data_19$Timestamp)))
data_20 <- data_20 %>%
mutate(Jahr = year(ymd_hms(data_20$Zeitstempel)))
data_21 <- data_21 %>%
mutate(Jahr = year(ymd_hms(data_21$Zeitstempel)))
data_22 <- data_22 %>%
mutate(Jahr = year(ymd_hms(data_22$Zeitstempel)))
data_23 <- data_23 %>%
mutate(Jahr = year(ymd_hms(data_23$Zeitstempel)))
data_24 <- data_24 %>%
mutate(Jahr = year(ymd_hms(data_24$Zeitstempel)))
#Renaming the columns
dictionary <- list(
"Zeitstempel" = c("zeitstempel", "timestamp"),
"Einverstaendniserklaerung" = c("einverstanden", "einverstaendnis", "Zwecke.der.Veranschaulichung"),
"Geschlecht" = c("Geschlecht"),
"Schuhgroesse" = c("Schuhgroesse"),
"Koerpergroesse" = c("Koerpergroesse", "Koerpergroesse..in.cm..", "Koerpergroesse..steht.in.Ihrem.Perso"),
"Liegestuetze" = c("Liegestuetze"),
"Statistik" = c("interessieren.Sie.sich.fuer.Statistik"),
"Wirtschaft" = c("interessieren.Sie.sich.fuer.wirtschaftliche.Zusammenhaenge"),
"Mathe" = c("interessieren.Sie.sich.fuer.Mathematik"),
"Coden" = c("Programmiertaetigkeiten"),
"Abi" = c("Abischnitt"),
"Punkte_Mathe" = c("Punkte.hatten.Sie.in.der.Schule.zuletzt.in.Mathematik"),
"Dr" = c("Dr..zu.machen"),
"Sport" = c("Wie.viele.Stunden.pro.Woche.treiben.Sie.Sport."),
"Entfernung" = c("entfernt.von.der.Uni"),
"Dauer" = c("Weg.zur.Uni", "Dauer..in.Minuten"),
"Partnerschaft" = c("Partner", "Partnerin"),
"Partei" = c("Partei"),
"Bildungsgrad" = c("Bildungsgrad"),
"Arbeit" = c("Studium.zu.finanzieren"),
"Einstiegsgehalt" = c("Einstiegsgehalt"),
"Ostwestfalen" = c("Ostwestfalen"),
"Handy" = c("Handy.Bildschirmzeit"),
"Alkohol" = c("Alkohol"),
"Rauchen" = c("Rauchen"),
"Kiffen" = c("gekifft"),
"Gendern" = c("gendern")
)
rename_columns <- function(df, dictionary) {
for (standard_name in names(dictionary)) {
synonyms <- dictionary[[standard_name]]
for (synonym in synonyms) {
# Find columns that match the synonym (partial or full match)
match_idx <- grep(synonym, names(df), ignore.case = TRUE)
if (length(match_idx) > 0) {
names(df)[match_idx] <- standard_name
}
}
}
return(df)
}
data_19 <- rename_columns(data_19, dictionary)
data_20 <- rename_columns(data_20, dictionary)
data_21 <- rename_columns(data_21, dictionary)
data_22 <- rename_columns(data_22, dictionary)
data_23 <- rename_columns(data_23, dictionary)
data_24 <- rename_columns(data_24, dictionary)
# Define the replacement rules
replacements <- c(
"moechte ich nicht sagen" = NA_character_, # Geschlecht
"moechte ich nicht sagen" = NA_character_, # Partnerschaft
"wuerde nicht waehlen gehen" = "nicht waehlen",
"war nicht waehlen" = "nicht waehlen",
"werde nicht waehlen" = "nicht waehlen",
"darf nicht waehlen" = "nicht waehlen",
"bin Gelegenheitsraucher*in (z.B. bei Partys)" = "nur gelegentlich",
"wie bitte" = NA_character_
)
# List of columns to modify (replace with your actual column names)
columns_to_modify <- c("Geschlecht", "Partnerschaft", "Partei", "Rauchen", "Kiffen")
# Function to modify a single dataset
modify_dataset <- function(df) {
# Identify columns to modify that are present in the dataset
cols_present <- intersect(columns_to_modify, names(df))
if (length(cols_present) > 0) {
df <- df %>%
mutate(across(
.cols = all_of(cols_present),
.fns = ~ {
# Convert to character
. <- as.character(.)
# Replace values using the replacements vector
. <- ifelse(. %in% names(replacements), replacements[.], .)
return(.)
}
))
}
return(df)
}
datasets = list(data_19, data_20, data_21, data_22, data_23, data_24)
# Apply the function to each dataset in the list
datasets <- lapply(datasets, modify_dataset)
# Function to display unique values in the modified columns
check_modifications <- function(df) {
cols_present <- intersect(columns_to_modify, names(df))
for (col in cols_present) {
cat("Unique values in", col, "after modification:\n")
print(unique(df[[col]]))
cat("\n")
}
}
# Apply the check function to each dataset
lapply(datasets, check_modifications)
# Apply the division in each data frame
for (i in seq_along(datasets)) {
datasets[[i]]$Abi <- datasets[[i]]$Abi / 10
}
# If you want to save them back as individual variables:
df_19 = datasets[[1]]
df_20 = datasets[[2]]
df_21 = datasets[[3]]
df_22 = datasets[[4]]
df_23 = datasets[[5]]
df_24 = datasets[[6]]
'
# Apply transformations to each data frame in the list with column existence checks
datasets <- lapply(datasets, function(df) {
# Apply each transformation conditionally based on column existence
if ("Schuhgroesse" %in% names(df)) {
df <- df %>% mutate(Schuhgroesse = ifelse(between(Schuhgroesse, 31, 52), Schuhgroesse, NA))
}
if ("Koerpergroesse" %in% names(df)) {
df <- df %>% mutate(Koerpergroesse = case_when(
Koerpergroesse > 0 & Koerpergroesse <= 3 ~ Koerpergroesse * 100,
between(Koerpergroesse, 120, 220) ~ Koerpergroesse,
TRUE ~ NA_real_
))
}
if ("Punkte_Mathe" %in% names(df)) {
df <- df %>% mutate(Punkte_Mathe = ifelse(Punkte_Mathe == 0, NA, Punkte_Mathe))
}
if ("Liegestuetze" %in% names(df)) {
df <- df %>% mutate(Liegestuetze = ifelse(between(Liegestuetze, 0, 100), Liegestuetze, NA))
}
if ("Gehalt" %in% names(df)) {
df <- df %>%
mutate(Gehalt = ifelse(Gehalt > 30000, Gehalt / 12, Gehalt)) %>%
mutate(Gehalt = ifelse(Gehalt > 12500, NA, Gehalt))
}
if ("Handy" %in% names(df)) {
df <- df %>%
mutate(Handy = as.numeric(Handy)) %>%
mutate(Handy = ifelse(Handy > 12, NA, Handy))
}
if ("Sport" %in% names(df)) {
df <- df %>% mutate(Sport = ifelse(Sport > 36, NA, Sport))
}
return(df)
})
# Check the structure of the transformed datasets to confirm the changes
str(datasets)
df_19 = datasets[[1]]
df_20 = datasets[[2]]
df_21 = datasets[[3]]
df_22 = datasets[[4]]
df_23 = datasets[[5]]
df_24 = datasets[[6]]
'
View(df_24)
# Apply transformations to each data frame in the list with column existence checks
data_test <- lapply(datasets, function(df) {
# Apply each transformation conditionally based on column existence
if ("Schuhgroesse" %in% names(df)) {
df <- df %>% mutate(Schuhgroesse = ifelse(between(Schuhgroesse, 31, 52), Schuhgroesse, NA))
}
if ("Koerpergroesse" %in% names(df)) {
df <- df %>% mutate(Koerpergroesse = case_when(
Koerpergroesse > 0 & Koerpergroesse <= 3 ~ Koerpergroesse * 100,
between(Koerpergroesse, 120, 220) ~ Koerpergroesse,
TRUE ~ NA_real_
))
}
if ("Punkte_Mathe" %in% names(df)) {
df <- df %>% mutate(Punkte_Mathe = ifelse(Punkte_Mathe == 0, NA, Punkte_Mathe))
}
if ("Liegestuetze" %in% names(df)) {
df <- df %>% mutate(Liegestuetze = ifelse(between(Liegestuetze, 0, 100), Liegestuetze, NA))
}
if ("Gehalt" %in% names(df)) {
df <- df %>%
mutate(Gehalt = ifelse(Gehalt > 30000, Gehalt / 12, Gehalt)) %>%
mutate(Gehalt = ifelse(Gehalt > 12500, NA, Gehalt))
}
if ("Handy" %in% names(df)) {
df <- df %>%
mutate(Handy = as.numeric(Handy)) %>%
mutate(Handy = ifelse(Handy > 12, NA, Handy))
}
if ("Sport" %in% names(df)) {
df <- df %>% mutate(Sport = ifelse(Sport > 36, NA, Sport))
}
return(df)
})
# Check the structure of the transformed datasets to confirm the changes
str(datasets)
datasets[[6]]
x = datasets[[6]]
View(x)
View(df_24)
# Apply transformations to each data frame in the list with column existence checks
data_test <- lapply(datasets, function(df) {
# Apply each transformation conditionally based on column existence
if ("Schuhgroesse" %in% names(df)) {
df <- df %>% mutate(Schuhgroesse = ifelse(between(Schuhgroesse, 31, 52), Schuhgroesse, NA))
}
if ("Koerpergroesse" %in% names(df)) {
df <- df %>% mutate(Koerpergroesse = case_when(
Koerpergroesse > 0 & Koerpergroesse <= 3 ~ Koerpergroesse * 100,
between(Koerpergroesse, 120, 220) ~ Koerpergroesse,
TRUE ~ NA_real_
))
}
if ("Punkte_Mathe" %in% names(df)) {
df <- df %>% mutate(Punkte_Mathe = ifelse(Punkte_Mathe == 0, NA, Punkte_Mathe))
}
if ("Liegestuetze" %in% names(df)) {
df <- df %>% mutate(Liegestuetze = ifelse(between(Liegestuetze, 0, 100), Liegestuetze, NA))
}
if ("Einstiegsgehalt" %in% names(df)) {
df <- df %>%
mutate(Einstiegsgehalt = ifelse(Einstiegsgehalt > 30000, Einstiegsgehalt / 12, Einstiegsgehalt)) %>%
mutate(Einstiegsgehalt = ifelse(Einstiegsgehalt > 12500, NA, Einstiegsgehalt))
}
if ("Handy" %in% names(df)) {
df <- df %>%
mutate(Handy = as.numeric(Handy)) %>%
mutate(Handy = ifelse(Handy > 12, NA, Handy))
}
if ("Sport" %in% names(df)) {
df <- df %>% mutate(Sport = ifelse(Sport > 36, NA, Sport))
}
return(df)
})
x = data_test[[6]]
View(x)
# At the beginning of each script
source("scripts/0_setup.R")
# Function to read data from CSV without standardizing column names
read_data <- function(file_path) {
data <- read_csv(file_path)
return(data)
}
# Function to read all datasets from a folder and return them as a list
load_datasets <- function(directory = "data/raw/historical") {
# List all CSV files in the directory
file_list <- list.files(path = directory, pattern = "\\.csv$", full.names = TRUE)
# Initialize an empty list to store data frames
data_list <- list()
# Loop through each file, read the data, and store it in the list
for (file_path in file_list) {
# Generate a unique name based on the file name (remove directory path and ".csv" extension)
data_name <- tools::file_path_sans_ext(basename(file_path))
# Read the data and add it to the list
data_list[[data_name]] <- read_data(file_path)
}
# Return the list of data frames
return(data_list)
}
# Load datasets by calling the function and storing the result
datasets <- load_datasets()
names(datasets)
data_19_raw <- datasets$Umfrage19jittered
data_20_raw <- datasets$Umfrage20jittered
data_21_raw <- datasets$Umfrage21jittered
data_22_raw <- datasets$Umfrage22jittered
data_23_raw <- datasets$Umfrage23jittered
data_24_raw <- datasets$Umfrage24jittered
# At the beginning of each script
source("scripts/0_setup.R")
# Filtering rows where "ja" is present in the agreement column
data_19 <- data_19_raw %>%
filter(grepl("ja", data_19_raw$X...WICHTIG.....Ich.bin.damit.einverstanden..dass.die.mit.dieser.Umfrage.gesammelten..anonymen..Daten.zum.Zwecke.der.Veranschaulichung.von.Methoden.in.den.Vorlesungen.Statistik.1...2.sowie.in.den.dazugehoerigen.Tutorien.genutzt.werden..Dieses.Einverstaendnis.kann.jederzeit.durch.Nachricht.an.den.Dozenten.widerrufen.werden..Potenziell.sensible.Informationen.werden.nicht.an.Dritte.weitergegeben.., ignore.case = TRUE))
data_20 <- data_20_raw %>%
filter(grepl("ja", data_20_raw$X...WICHTIG.....Ich.bin.damit.einverstanden..dass.die.mit.dieser.Umfrage.gesammelten..anonymen..Daten.vom.Dozenten.zum.Zwecke.der.Veranschaulichung.von.Methoden.genutzt.werden..Dieses.Einverstaendnis.kann.jederzeit.durch.Nachricht.an.den.Dozenten.widerrufen.werden..Potenziell.sensible.Informationen.werden.nicht.an.Dritte.weitergegeben.., ignore.case = TRUE))
data_21 <- data_21_raw %>%
filter(grepl("ja", data_21_raw$X...WICHTIG.....Ich.bin.damit.einverstanden..dass.die.mit.dieser.Umfrage.gesammelten..anonymen..Daten.vom.Dozenten.zum.Zwecke.der.Veranschaulichung.von.Methoden.genutzt.werden..Dieses.Einverstaendnis.kann.jederzeit.durch.Nachricht.an.den.Dozenten.widerrufen.werden..Potenziell.sensible.Informationen.werden.nicht.an.Dritte.weitergegeben.., ignore.case = TRUE))
data_22 <- data_22_raw %>%
filter(grepl("ja", data_22_raw$X...WICHTIG.....Ich.bin.damit.einverstanden..dass.die.mit.dieser.Umfrage.gesammelten..anonymen..Daten.vom.Dozenten.zum.Zwecke.der.Veranschaulichung.von.Methoden.genutzt.werden..Dieses.Einverstaendnis.kann.jederzeit.durch.Nachricht.an.den.Dozenten.widerrufen.werden..Potenziell.sensible.Informationen.werden.nicht.an.Dritte.weitergegeben.., ignore.case = TRUE))
data_23 <- data_23_raw %>%
filter(grepl("ja", data_23_raw$X...WICHTIG.....Ich.bin.damit.einverstanden..dass.die.mit.dieser.Umfrage.gesammelten..anonymen..Daten.vom.Dozenten.zum.Zwecke.der.Veranschaulichung.von.Methoden.genutzt.werden..Potenziell.sensible.Informationen.werden.nicht.an.Dritte.weitergegeben.., ignore.case = TRUE))
data_24 <- data_24_raw %>%
filter(grepl("ja", data_24_raw$X...WICHTIG.....Ich.bin.damit.einverstanden..dass.die.mit.dieser.Umfrage.gesammelten..anonymen..Daten.vom.Dozenten.zum.Zwecke.der.Veranschaulichung.von.Methoden.genutzt.werden..Potenziell.sensible.Informationen.werden.nicht.an.Dritte.weitergegeben.., ignore.case = TRUE))
#Creating a new column with year
data_19 <- data_19 %>%
mutate(Jahr = year(ymd_hms(data_19$Timestamp)))
data_20 <- data_20 %>%
mutate(Jahr = year(ymd_hms(data_20$Zeitstempel)))
data_21 <- data_21 %>%
mutate(Jahr = year(ymd_hms(data_21$Zeitstempel)))
data_22 <- data_22 %>%
mutate(Jahr = year(ymd_hms(data_22$Zeitstempel)))
data_23 <- data_23 %>%
mutate(Jahr = year(ymd_hms(data_23$Zeitstempel)))
data_24 <- data_24 %>%
mutate(Jahr = year(ymd_hms(data_24$Zeitstempel)))
#Renaming the columns
dictionary <- list(
"Zeitstempel" = c("zeitstempel", "timestamp"),
"Einverstaendniserklaerung" = c("einverstanden", "einverstaendnis", "Zwecke.der.Veranschaulichung"),
"Geschlecht" = c("Geschlecht"),
"Schuhgroesse" = c("Schuhgroesse"),
"Koerpergroesse" = c("Koerpergroesse", "Koerpergroesse..in.cm..", "Koerpergroesse..steht.in.Ihrem.Perso"),
"Liegestuetze" = c("Liegestuetze"),
"Statistik" = c("interessieren.Sie.sich.fuer.Statistik"),
"Wirtschaft" = c("interessieren.Sie.sich.fuer.wirtschaftliche.Zusammenhaenge"),
"Mathe" = c("interessieren.Sie.sich.fuer.Mathematik"),
"Coden" = c("Programmiertaetigkeiten"),
"Abi" = c("Abischnitt"),
"Punkte_Mathe" = c("Punkte.hatten.Sie.in.der.Schule.zuletzt.in.Mathematik"),
"Dr" = c("Dr..zu.machen"),
"Sport" = c("Wie.viele.Stunden.pro.Woche.treiben.Sie.Sport."),
"Entfernung" = c("entfernt.von.der.Uni"),
"Dauer" = c("Weg.zur.Uni", "Dauer..in.Minuten"),
"Partnerschaft" = c("Partner", "Partnerin"),
"Partei" = c("Partei"),
"Bildungsgrad" = c("Bildungsgrad"),
"Arbeit" = c("Studium.zu.finanzieren"),
"Einstiegsgehalt" = c("Einstiegsgehalt"),
"Ostwestfalen" = c("Ostwestfalen"),
"Handy" = c("Handy.Bildschirmzeit"),
"Alkohol" = c("Alkohol"),
"Rauchen" = c("Rauchen"),
"Kiffen" = c("gekifft"),
"Gendern" = c("gendern")
)
rename_columns <- function(df, dictionary) {
for (standard_name in names(dictionary)) {
synonyms <- dictionary[[standard_name]]
for (synonym in synonyms) {
# Find columns that match the synonym (partial or full match)
match_idx <- grep(synonym, names(df), ignore.case = TRUE)
if (length(match_idx) > 0) {
names(df)[match_idx] <- standard_name
}
}
}
return(df)
}
data_19 <- rename_columns(data_19, dictionary)
data_20 <- rename_columns(data_20, dictionary)
data_21 <- rename_columns(data_21, dictionary)
data_22 <- rename_columns(data_22, dictionary)
data_23 <- rename_columns(data_23, dictionary)
data_24 <- rename_columns(data_24, dictionary)
# Define the replacement rules
replacements <- c(
"moechte ich nicht sagen" = NA_character_, # Geschlecht
"moechte ich nicht sagen" = NA_character_, # Partnerschaft
"wuerde nicht waehlen gehen" = "nicht waehlen",
"war nicht waehlen" = "nicht waehlen",
"werde nicht waehlen" = "nicht waehlen",
"darf nicht waehlen" = "nicht waehlen",
"bin Gelegenheitsraucher*in (z.B. bei Partys)" = "nur gelegentlich",
"wie bitte" = NA_character_
)
# List of columns to modify (replace with your actual column names)
columns_to_modify <- c("Geschlecht", "Partnerschaft", "Partei", "Rauchen", "Kiffen")
# Function to modify a single dataset
modify_dataset <- function(df) {
# Identify columns to modify that are present in the dataset
cols_present <- intersect(columns_to_modify, names(df))
if (length(cols_present) > 0) {
df <- df %>%
mutate(across(
.cols = all_of(cols_present),
.fns = ~ {
# Convert to character
. <- as.character(.)
# Replace values using the replacements vector
. <- ifelse(. %in% names(replacements), replacements[.], .)
return(.)
}
))
}
return(df)
}
datasets = list(data_19, data_20, data_21, data_22, data_23, data_24)
# Apply the function to each dataset in the list
datasets <- lapply(datasets, modify_dataset)
# Function to display unique values in the modified columns
check_modifications <- function(df) {
cols_present <- intersect(columns_to_modify, names(df))
for (col in cols_present) {
cat("Unique values in", col, "after modification:\n")
print(unique(df[[col]]))
cat("\n")
}
}
# Apply the check function to each dataset
lapply(datasets, check_modifications)
# Apply the division in each data frame
for (i in seq_along(datasets)) {
datasets[[i]]$Abi <- datasets[[i]]$Abi / 10
}
# If you want to save them back as individual variables:
df_19 = datasets[[1]]
df_20 = datasets[[2]]
df_21 = datasets[[3]]
df_22 = datasets[[4]]
df_23 = datasets[[5]]
df_24 = datasets[[6]]
# Apply transformations to each data frame in the list with column existence checks
data_test <- lapply(datasets, function(df) {
# Apply each transformation conditionally based on column existence
if ("Schuhgroesse" %in% names(df)) {
df <- df %>% mutate(Schuhgroesse = ifelse(between(Schuhgroesse, 31, 52), Schuhgroesse, NA))
}
if ("Koerpergroesse" %in% names(df)) {
df <- df %>% mutate(Koerpergroesse = case_when(
Koerpergroesse > 0 & Koerpergroesse <= 3 ~ Koerpergroesse * 100,
between(Koerpergroesse, 120, 220) ~ Koerpergroesse,
TRUE ~ NA_real_
))
}
if ("Punkte_Mathe" %in% names(df)) {
df <- df %>% mutate(Punkte_Mathe = ifelse(Punkte_Mathe == 0, NA, Punkte_Mathe))
}
if ("Liegestuetze" %in% names(df)) {
df <- df %>% mutate(Liegestuetze = ifelse(between(Liegestuetze, 0, 100), Liegestuetze, NA))
}
if ("Einstiegsgehalt" %in% names(df)) {
df <- df %>%
mutate(Einstiegsgehalt = ifelse(Einstiegsgehalt > 30000, Einstiegsgehalt / 12, Einstiegsgehalt)) %>%
mutate(Einstiegsgehalt = ifelse(Einstiegsgehalt > 12500, NA, Einstiegsgehalt))
}
if ("Handy" %in% names(df)) {
df <- df %>%
mutate(Handy = as.numeric(Handy)) %>%
mutate(Handy = ifelse(Handy > 12, NA, Handy))
}
if ("Sport" %in% names(df)) {
df <- df %>% mutate(Sport = ifelse(Sport > 36, NA, Sport))
}
return(df)
})
# Check the structure of the transformed datasets to confirm the changes
str(datasets)
x = data_test[[6]]
'
df_19 = datasets[[1]]
df_20 = datasets[[2]]
df_21 = datasets[[3]]
df_22 = datasets[[4]]
df_23 = datasets[[5]]
df_24 = datasets[[6]]'
View(x)
View(df_24)
# Load necessary libraries
library(readr) #part of tidyverse
library(dplyr)
library(lubridate)
library(knitr)
# Load necessary libraries
library(readr) #part of tidyverse
library(dplyr)
library(lubridate)
library(knitr)
